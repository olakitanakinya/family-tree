name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree
  PUBLIC_IP: 98.81.89.67
  NODE_PORT: 30008

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Create Namespace
      run: |
        kubectl apply -f k8s/namespace.yaml

    - name: Quick Storage Setup
      run: |
        echo "📦 Quick storage setup..."
        
        # Skip storage provisioner if already exists
        kubectl get storageclass local-path &>/dev/null || (
          kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
          sleep 5
        )
        
        # Create MySQL PVC
        kubectl apply -f k8s/mysql-pvc.yaml
        
        # Quick PVC handling - delete if exists, create if not
        if kubectl get pvc laravel-shared-storage -n $K8S_NAMESPACE &>/dev/null; then
          echo "PVC exists, reusing it..."
        else
          echo "Creating new PVC..."
          kubectl apply -f k8s/laravel-storage-pvc.yaml
        fi
        
        echo "✅ Storage setup completed"

    - name: Deploy Database
      run: |
        echo "🗄️ Deploying MySQL database..."
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml
        
        # Wait for MySQL to be ready
        echo "⏳ Waiting for MySQL to be ready..."
        kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=180s

    - name: Import Database Schema
      run: |
        echo "📊 Importing database..."
        kubectl apply -f k8s/db-sql-configmap.yaml
        kubectl apply -f k8s/db-import-job.yaml
        
        # Wait for import to complete
        echo "⏳ Waiting for database import..."
        kubectl wait --for=condition=complete job/db-import -n $K8S_NAMESPACE --timeout=180s

    - name: Deploy Laravel Application
      run: |
        echo "🚀 Deploying Laravel application..."
        kubectl apply -f k8s/laravel-deployment.yaml
        kubectl apply -f k8s/laravel-service.yaml
        
        # Wait for rollout
        echo "⏳ Waiting for Laravel deployment..."
        kubectl rollout status deployment/laravel-app -n $K8S_NAMESPACE --timeout=300s

    - name: Quick Storage Init
      run: |
        echo "🔧 Quick storage initialization..."
        
        # Just ensure storage directories exist in one pod
        POD_NAME=$(kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
        
        if [ -n "$POD_NAME" ]; then
          kubectl exec -n $K8S_NAMESPACE $POD_NAME -- /bin/sh -c "
            mkdir -p /var/www/storage/app/public/{logos,userimage,images}
            chmod -R 775 /var/www/storage/
            php artisan storage:link --force
            echo '✅ Storage ready'
          " || echo "⚠️ Storage init skipped - pod not ready"
        else
          echo "⚠️ No pods available for storage init"
        fi

    - name: Final Quick Test
      run: |
        echo "🧪 Quick deployment test..."
        ACCESS_URL="http://$PUBLIC_IP:$NODE_PORT"
        
        # Quick health check
        curl -s --connect-timeout 10 $ACCESS_URL/health.php > /dev/null && echo "✅ Health check passed" || echo "⚠️ Health check failed"
        
        # Show status
        kubectl get pods -n $K8S_NAMESPACE
        echo "🌐 Application URL: $ACCESS_URL"

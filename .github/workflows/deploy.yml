name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree
  PUBLIC_IP: 98.81.89.67
  NODE_PORT: 30008

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Create Namespace
      run: |
        kubectl apply -f k8s/namespace.yaml

    - name: Setup Storage
      run: |
        echo "üì¶ Setting up storage..."
        # Install Local Path Provisioner if not exists
        if ! kubectl get storageclass local-path &>/dev/null; then
          kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
          sleep 30
          kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
        fi

        # Create MySQL PVC
        kubectl apply -f k8s/mysql-pvc.yaml
        
        # Create Laravel Shared Storage PVC
        kubectl apply -f k8s/laravel-storage-pvc.yaml

    - name: Deploy Database
      run: |
        echo "üóÑÔ∏è Deploying MySQL database..."
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml
        
        # Wait for MySQL to be ready
        echo "‚è≥ Waiting for MySQL to be ready..."
        kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=300s

    - name: Import Database
      run: |
        echo "üìä Importing database..."
        kubectl apply -f k8s/db-sql-configmap.yaml
        kubectl apply -f k8s/db-import-job.yaml
        
        # Wait for database import to complete
        echo "‚è≥ Waiting for database import..."
        kubectl wait --for=condition=complete job/db-import -n $K8S_NAMESPACE --timeout=300s

    - name: Deploy Laravel Application
      run: |
        echo "üöÄ Deploying Laravel application..."
        
        # Update deployment with latest image
        kubectl set image deployment/laravel-app -n $K8S_NAMESPACE laravel-app=${{ env.DOCKER_IMAGE }}:latest || \
        kubectl apply -f k8s/laravel-deployment.yaml
        
        kubectl apply -f k8s/laravel-service.yaml

        # Wait for deployment to complete
        echo "‚è≥ Waiting for deployment to complete..."
        kubectl rollout status deployment/laravel-app -n $K8S_NAMESPACE --timeout=300s

    - name: Configure Laravel
      run: |
        echo "üîß Configuring Laravel..."
        ACCESS_URL="http://$PUBLIC_IP:$NODE_PORT"
        
        # Get the first running pod
        until POD_NAME=$(kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}' 2>/dev/null); do
          echo "‚è≥ Waiting for Laravel pod to be ready..."
          sleep 10
        done

        echo "üìù Configuring pod: $POD_NAME"

        # Update environment configuration
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- /bin/sh -c "
          # Update URLs
          sed -i 's|APP_URL=.*|APP_URL=$ACCESS_URL|' /var/www/.env
          sed -i 's|ASSET_URL=.*|ASSET_URL=$ACCESS_URL|' /var/www/.env
          
          # Ensure session driver is file
          sed -i 's/SESSION_DRIVER=.*/SESSION_DRIVER=file/' /var/www/.env
          
          # Set filesystem disk
          sed -i 's/FILESYSTEM_DISK=.*/FILESYSTEM_DISK=public/' /var/www/.env
        "

        # Setup storage directories and permissions
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- /bin/sh -c "
          echo 'üìÅ Setting up storage directories...'
          
          # Create necessary directories
          mkdir -p /var/www/storage/app/public/{logos,favicons,images,settings,album,cover_photo,profile-bg,userimage,post,chat,story,blog,event,groups,marketplace,pages,sponsor,thumbnails,videos}
          mkdir -p /var/www/storage/framework/{sessions,views,cache/data}
          
          # Set permissions
          chmod -R 775 /var/www/storage/
          chown -R www-data:www-data /var/www/storage/
          
          # Create storage link
          php artisan storage:link --force
          
          # Clear caches
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear
          
          # Cache config
          php artisan config:cache
        "

    - name: Verify Shared Storage
      run: |
        echo "üß™ Testing shared storage..."
        PODS=($(kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app -o jsonpath='{.items[*].metadata.name}'))

        if [ ${#PODS[@]} -ge 2 ]; then
          # Write test file from first pod
          kubectl exec -n $K8S_NAMESPACE ${PODS[0]} -- /bin/sh -c "
            echo 'Cross-pod storage test from ${PODS[0]} at \$(date)' > /var/www/storage/app/public/logos/cross_pod_test.txt
          "

          # Verify from second pod
          kubectl exec -n $K8S_NAMESPACE ${PODS[1]} -- /bin/sh -c "
            if [ -f /var/www/storage/app/public/logos/cross_pod_test.txt ]; then
              echo '‚úÖ SUCCESS: Shared storage is working correctly!'
              cat /var/www/storage/app/public/logos/cross_pod_test.txt
            else
              echo '‚ùå FAILED: Shared storage not working'
              exit 1
            fi
          "
        else
          echo "‚ÑπÔ∏è  Only one pod found, skipping cross-pod storage test"
        fi

    - name: Final Verification
      run: |
        echo "üéØ Final verification..."
        ACCESS_URL="http://$PUBLIC_IP:$NODE_PORT"

        # Test application health
        echo "üìä Testing application endpoints..."
        CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $ACCESS_URL/assets/frontend/css/bootstrap.min.css || echo "000")
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $ACCESS_URL/health.php || echo "000")

        echo "Test Results:"
        echo "  Bootstrap CSS: $CSS_STATUS"
        echo "  Health Check: $HEALTH_STATUS"

        # Show deployment status
        echo ""
        echo "üì¶ Deployment Status:"
        kubectl get pods -n $K8S_NAMESPACE
        echo ""
        echo "üíæ PVC Status:"
        kubectl get pvc -n $K8S_NAMESPACE
        echo ""
        echo "üåê Application URL: $ACCESS_URL"

        if [ "$CSS_STATUS" = "200" ]; then
          echo "‚úÖ SUCCESS: Application deployed successfully!"
        else
          echo "‚ö†Ô∏è  WARNING: Some assets may not be loading correctly"
          exit 1
        fi

    - name: Fix Storage Across All Pods
      run: |
        echo "üîß Ensuring storage consistency across all pods..."
        
        # Wait for all pods to be ready
        sleep 30
        
        PODS=($(kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app -o jsonpath='{.items[*].metadata.name}'))
        
        for POD in "${PODS[@]}"; do
          echo "üîÑ Configuring storage on pod: $POD"
          
          kubectl exec -n $K8S_NAMESPACE $POD -- /bin/sh -c "
            # Recreate storage link to ensure consistency
            php artisan storage:link --force
            
            # Set proper permissions
            chmod -R 775 /var/www/storage/
            chown -R www-data:www-data /var/www/storage/
            
            # Clear and cache config
            php artisan config:clear
            php artisan cache:clear
            php artisan config:cache
            
            echo '‚úÖ Storage configured on $POD'
          " || echo "‚ö†Ô∏è Pod $POD still initializing"
        done

name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Install Local Path Provisioner
      run: |
        echo "Installing Local Path Provisioner for storage..."
        kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
        sleep 30
        kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
        echo "Storage classes:"
        kubectl get storageclass

    - name: Deploy Database
      run: |
        # Apply MySQL resources
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-pvc.yaml
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml

        # Wait for MySQL
        echo "Waiting for MySQL to be ready..."
        kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=300s

    - name: Import Database
      run: |
        echo "Importing database..."
        kubectl apply -f k8s/db-sql-configmap.yaml
        kubectl apply -f k8s/db-import-job.yaml
        kubectl wait --for=condition=complete job/db-import -n $K8S_NAMESPACE --timeout=300s
        kubectl logs -n $K8S_NAMESPACE -l job-name=db-import

    - name: Deploy Laravel Application
      run: |
        # Clean up any existing pods
        kubectl delete pods -n $K8S_NAMESPACE -l app=laravel-app --ignore-not-found=true

        # Deploy Laravel
        kubectl apply -f k8s/laravel-deployment.yaml
        kubectl apply -f k8s/laravel-service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for Laravel Pods
      run: |
        echo "Waiting for Laravel pods to be ready..."
        timeout 300s bash -c 'until kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app --no-headers 2>/dev/null | grep -q "Running"; do
          echo "Pods starting..."
          kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app 2>/dev/null || echo "No pods yet"
          sleep 10
        done'
        echo "Laravel pods are running!"

    - name: Fix Laravel Configuration
      run: |
        echo "Fixing Laravel configuration using direct pod execution..."
        
        # Get a running Laravel pod
        POD_NAME=$(kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app -o jsonpath='{.items[0].metadata.name}')
        echo "Using pod: $POD_NAME"
        
        # Clear all caches (skip route:cache to avoid the serialization error)
        echo "Clearing Laravel caches..."
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan config:clear
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan view:clear
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan cache:clear
        
        # Fix APP configuration without touching .env (since you use config/database.php)
        echo "Fixing application configuration..."
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- /bin/sh -c "
          # Only fix APP_URL if .env exists, otherwise skip (since DB config is in config/database.php)
          if [ -f .env ]; then
            echo 'Fixing APP_URL in existing .env file'
            grep -v 'APP_URL=' .env | grep -v 'ASSET_URL=' > .env.tmp || true
            echo 'APP_URL=' >> .env.tmp
            mv .env.tmp .env
          else
            echo 'No .env file found - using config/database.php for DB config (as expected)'
          fi
        "
        
        # Run Laravel maintenance commands (skip route:cache due to the error)
        echo "Running Laravel maintenance commands..."
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan storage:link || echo "Storage link may already exist"
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan config:cache
        
        # Note: We're skipping php artisan route:cache due to the serialization error
        echo "Skipping route cache due to route naming conflict"
        
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan view:cache
        
        # Verify the fix
        echo "Verifying configuration fix..."
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan tinker --execute="echo 'APP_URL: ' . config('app.url');"
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan tinker --execute="echo 'Asset URL: ' . (config('app.asset_url') ?: 'Not set');"
        
        echo "‚úÖ Laravel configuration fixed successfully!"

    - name: Restart Application
      run: |
        echo "Restarting application to apply configuration..."
        kubectl rollout restart deployment/laravel-app -n $K8S_NAMESPACE
        kubectl rollout status deployment/laravel-app -n $K8S_NAMESPACE --timeout=300s

    - name: Verify Deployment
      run: |
        echo "Verifying deployment..."

        # Wait for pods after restart
        timeout 180s bash -c 'until kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app --no-headers 2>/dev/null | grep -q "Running"; do
          echo "Pods restarting..."
          sleep 10
        done'

        # Test application
        echo "=== Testing application ==="
        kubectl get pods -n $K8S_NAMESPACE

        # Test health endpoint
        echo "=== Health check ==="
        kubectl exec -n $K8S_NAMESPACE deployment/laravel-app -- curl -s http://localhost/health.php

        # Verify configuration is correct
        echo "=== Configuration verification ==="
        kubectl exec -n $K8S_NAMESPACE deployment/laravel-app -- php artisan tinker --execute="echo 'APP_URL: ' . config('app.url');"
        kubectl exec -n $K8S_NAMESPACE deployment/laravel-app -- php artisan tinker --execute="echo 'Asset URL: ' . (config('app.asset_url') ?: 'Not set');"

        # Test CSS/JS assets are loading
        echo "=== Asset verification ==="
        kubectl port-forward -n $K8S_NAMESPACE svc/laravel-service 8080:80 &
        sleep 5
        echo "Testing asset loading..."
        curl -s -o /dev/null -w "CSS status: %{http_code}\n" http://localhost:8080/css/app.css
        curl -s -o /dev/null -w "JS status: %{http_code}\n" http://localhost:8080/js/app.js
        
        # Test the actual application page
        echo "Testing application page..."
        curl -s http://localhost:8080/ | grep -E "(href.*\.css|src.*\.js|stylesheet)" | head -5
        pkill -f "kubectl port-forward"

        # Final status
        echo "‚úÖ Deployment completed successfully!"
        kubectl get all -n $K8S_NAMESPACE
        echo ""
        echo "üéâ Your Family Tree application is now fully deployed!"
        echo "üìù To access your application, run: kubectl port-forward -n $K8S_NAMESPACE svc/laravel-service 8080:80"
        echo "üåê Then visit: http://localhost:8080"

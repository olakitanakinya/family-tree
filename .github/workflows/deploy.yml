name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Install Local Path Provisioner
      run: |
        echo "Installing Local Path Provisioner for storage..."
        kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
        sleep 30
        kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

    - name: Deploy Database
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-pvc.yaml
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml
        kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=300s

    - name: Import Database
      run: |
        kubectl apply -f k8s/db-sql-configmap.yaml
        kubectl apply -f k8s/db-import-job.yaml
        kubectl wait --for=condition=complete job/db-import -n $K8S_NAMESPACE --timeout=300s

    - name: Deploy Laravel Application
      run: |
        kubectl delete pods -n $K8S_NAMESPACE -l app=laravel-app --ignore-not-found=true
        kubectl apply -f k8s/laravel-deployment.yaml
        kubectl apply -f k8s/laravel-service.yaml
        kubectl rollout status deployment/laravel-app -n $K8S_NAMESPACE --timeout=300s

    - name: Wait for Laravel Pods
      run: |
        echo "Waiting for Laravel pods to be ready..."
        timeout 180s bash -c 'until kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app --no-headers 2>/dev/null | grep -q "Running"; do
          sleep 10
        done'
        echo "‚úÖ Laravel pods are running!"

    - name: Fix Laravel Configuration
      run: |
        POD_NAME=$(kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app -o jsonpath='{.items[0].metadata.name}')
        
        # Clear caches
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan config:clear
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan view:clear
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan cache:clear

        # Fix configuration
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- /bin/sh -c "
          if [ -f .env ]; then
            grep -v 'APP_URL=' .env | grep -v 'ASSET_URL=' > .env.tmp || true
            echo 'APP_URL=' >> .env.tmp
            mv .env.tmp .env
          fi
        "

        # Run maintenance
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan storage:link || true
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan config:cache
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan view:cache

        echo "‚úÖ Laravel configuration fixed"

    - name: Determine Service Access Method
      run: |
        kubectl get svc -n $K8S_NAMESPACE
        
        SERVICE_TYPE=$(kubectl get svc laravel-service -n $K8S_NAMESPACE -o jsonpath='{.spec.type}' 2>/dev/null || echo "NodePort")
        NODE_PORT=$(kubectl get svc laravel-service -n $K8S_NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "30008")
        PUBLIC_IP="98.81.89.67"
        
        ACCESS_URL="http://$PUBLIC_IP:$NODE_PORT"
        echo "ACCESS_URL=$ACCESS_URL" >> $GITHUB_ENV
        echo "üåê Access URL: $ACCESS_URL"

    - name: Verify Deployment
      run: |
        echo "=== Final Verification ==="
        
        # Test critical assets
        CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $ACCESS_URL/assets/frontend/css/style.css || echo "000")
        JS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $ACCESS_URL/assets/frontend/js/jquery-3.6.0.min.js || echo "000")
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $ACCESS_URL/health.php || echo "000")
        
        echo "üìä Test Results:"
        echo "   CSS: $CSS_STATUS"
        echo "   JS: $JS_STATUS" 
        echo "   Health: $HEALTH_STATUS"
        
        if [ "$CSS_STATUS" = "200" ] && [ "$JS_STATUS" = "200" ]; then
          echo "üéâ SUCCESS: CSS issue resolved!"
          echo "üåê Application: $ACCESS_URL"
        else
          echo "‚ùå ISSUE: Assets not loading correctly"
          echo "üîß Debug URL: $ACCESS_URL"
        fi
        
        kubectl get all -n $K8S_NAMESPACE

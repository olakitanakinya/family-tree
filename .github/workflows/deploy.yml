name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree
  PUBLIC_IP: 98.81.89.67
  NODE_PORT: 30008

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Install Local Path Provisioner
      run: |
        echo "Installing Local Path Provisioner for storage..."
        kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
        sleep 30
        kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

    - name: Deploy Database
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-pvc.yaml
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml
        kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=300s

    - name: Import Database
      run: |
        kubectl apply -f k8s/db-sql-configmap.yaml
        kubectl apply -f k8s/db-import-job.yaml
        kubectl wait --for=condition=complete job/db-import -n $K8S_NAMESPACE --timeout=300s

    - name: Deploy Laravel Application
      run: |
        kubectl delete pods -n $K8S_NAMESPACE -l app=laravel-app --ignore-not-found=true
        kubectl apply -f k8s/laravel-deployment.yaml
        kubectl apply -f k8s/laravel-service.yaml
        
        # Wait with retries for deployment
        echo "Waiting for deployment to complete..."
        for i in {1..30}; do
          if kubectl rollout status deployment/laravel-app -n $K8S_NAMESPACE --timeout=60s 2>/dev/null; then
            echo "‚úÖ Deployment successful!"
            break
          else
            echo "‚è≥ Attempt $i/30: Deployment not ready yet..."
            kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app
            sleep 10
          fi
        done

    - name: Wait for Laravel Pods
      run: |
        echo "Waiting for Laravel pods to be ready..."
        timeout 180s bash -c 'until kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app --no-headers 2>/dev/null | grep -q "Running"; do
          sleep 10
        done'
        echo "‚úÖ Laravel pods are running!"

    - name: Fix Laravel Configuration
      run: |
        POD_NAME=$(kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app -o jsonpath='{.items[0].metadata.name}')
        ACCESS_URL="http://$PUBLIC_IP:$NODE_PORT"
        
        echo "üîß Fixing Laravel configuration on pod: $POD_NAME"
        
        # 1. Set environment variables
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- /bin/sh -c "
          sed -i 's|APP_URL=.*|APP_URL=$ACCESS_URL|' /var/www/.env
          sed -i 's|ASSET_URL=.*|ASSET_URL=$ACCESS_URL|' /var/www/.env
        "
        
        # 2. Clear all caches
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan config:clear
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan cache:clear
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan view:clear
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan route:clear
        
        # 3. Simple nginx fix
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- /bin/sh -c "
          if ! grep -q 'artisanpublic' /etc/nginx/sites-available/default; then
            sed -i '/location \/ {/i\    location /artisanpublic/ { rewrite ^/artisanpublic\/(.*) \/\$1 permanent; }' /etc/nginx/sites-available/default
          fi
          nginx -t && nginx -s reload
        " || echo "Nginx configuration already fixed"
        
        # 4. Update Blade templates
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- /bin/sh -c "
          sed -i 's|{{ asset.*bootstrap.min.css.*}}|$ACCESS_URL/assets/frontend/css/bootstrap.min.css|g' /var/www/resources/views/auth/layout/header.blade.php
          sed -i 's|{{ asset.*fontawesome.*}}|$ACCESS_URL/assets/frontend/css/fontawesome/all.min.css|g' /var/www/resources/views/auth/layout/header.blade.php
        "
        
        # 5. Run Laravel maintenance
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan storage:link || true
        kubectl exec -n $K8S_NAMESPACE $POD_NAME -- php artisan config:cache
        
        echo '‚úÖ Laravel configuration fixed'

    - name: Test Configuration
      run: |
        ACCESS_URL="http://$PUBLIC_IP:$NODE_PORT"
        
        echo "üß™ Testing configuration..."
        
        # Test asset access
        CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $ACCESS_URL/assets/frontend/css/bootstrap.min.css || echo "000")
        echo "Bootstrap CSS: $CSS_STATUS"
        
        # Test redirect
        REDIRECT_OUTPUT=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $ACCESS_URL/artisanpublic/assets/frontend/css/bootstrap.min.css || echo "000")
        echo "Artisanpublic redirect: $REDIRECT_OUTPUT"
        
        # Test login page
        curl -s $ACCESS_URL/login | grep -E "bootstrap.min.css" | head -2 || echo "Could not fetch login page"

    - name: Verify Deployment
      run: |
        ACCESS_URL="http://$PUBLIC_IP:$NODE_PORT"
        
        echo "=== Final Verification ==="

        # Test critical assets
        CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $ACCESS_URL/assets/frontend/css/bootstrap.min.css || echo "000")
        STYLE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $ACCESS_URL/assets/frontend/css/style.css || echo "000")
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 $ACCESS_URL/health.php || echo "000")

        echo "üìä Test Results:"
        echo "   Bootstrap CSS: $CSS_STATUS"
        echo "   Style CSS: $STYLE_STATUS"
        echo "   Health: $HEALTH_STATUS"

        if [ "$CSS_STATUS" = "200" ] && [ "$STYLE_STATUS" = "200" ]; then
          echo "üéâ SUCCESS: CSS assets are loading correctly!"
          echo "üåê Application URL: $ACCESS_URL"
          echo "üì± Login Page: $ACCESS_URL/login"
        else
          echo "‚ö†Ô∏è  WARNING: Some assets may not be loading correctly"
          echo "üîß Check the application manually: $ACCESS_URL/login"
        fi

        # Show deployment status
        echo ""
        echo "üì¶ Deployment Status:"
        kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app

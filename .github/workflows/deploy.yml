name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Install Local Path Provisioner
      run: |
        echo "Installing Local Path Provisioner for storage..."
        kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
        sleep 30
        kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
        echo "Storage classes:"
        kubectl get storageclass

    - name: Deploy Database
      run: |
        # Apply MySQL resources
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-pvc.yaml
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml
        
        # Wait for MySQL
        echo "Waiting for MySQL to be ready..."
        kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=300s

    - name: Import Database
      run: |
        echo "Importing database..."
        kubectl apply -f k8s/db-sql-configmap.yaml
        kubectl apply -f k8s/db-import-job.yaml
        kubectl wait --for=condition=complete job/db-import -n $K8S_NAMESPACE --timeout=300s
        kubectl logs -n $K8S_NAMESPACE -l job-name=db-import

    - name: Deploy Laravel Application
      run: |
        # Clean up any existing pods
        kubectl delete pods -n $K8S_NAMESPACE -l app=laravel-app --ignore-not-found=true
        
        # Deploy Laravel
        kubectl apply -f k8s/laravel-deployment.yaml
        kubectl apply -f k8s/laravel-service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Fix Laravel Configuration
      run: |
        echo "Fixing Laravel configuration for assets..."
        cat > /tmp/fix-laravel-config.yaml << 'EOF'
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: fix-laravel-config
          namespace: $K8S_NAMESPACE
        spec:
          template:
            spec:
              containers:
              - name: fix-config
                image: $DOCKER_IMAGE:latest
                command:
                - /bin/sh
                - -c
                - |
                  echo "Fixing Laravel configuration..."
                  
                  # Clear all caches
                  php artisan config:clear
                  php artisan route:clear
                  php artisan view:clear
                  php artisan cache:clear
                  
                  # Fix .env configuration
                  if [ -f .env ]; then
                    sed -i 's/APP_URL=.*/APP_URL=/g' .env
                    sed -i '/ASSET_URL=/d' .env
                  else
                    cat > .env << 'ENVFILE'
        APP_NAME="Family Tree"
        APP_ENV=production
        APP_KEY=base64:9jvjThP6JJA5ENjR2evQ27g3H7YE0OtCG+szdOeUsvM=
        APP_DEBUG=false
        APP_URL=

        DB_CONNECTION=mysql
        DB_HOST=mysql-service
        DB_PORT=3306
        DB_DATABASE=familytreedb
        DB_USERNAME=familytreeuser
        DB_PASSWORD=Password123
        ENVFILE
                  fi
                  
                  # Create storage link and cache
                  php artisan storage:link || echo "Storage link may exist"
                  php artisan config:cache
                  php artisan route:cache
                  php artisan view:cache
                  
                  echo "Configuration fixed!"
                  php artisan tinker --execute="echo 'APP_URL: ' . config('app.url');"
                env:
                - name: DB_HOST
                  value: "mysql-service"
                - name: DB_PORT
                  value: "3306"
                - name: DB_DATABASE
                  value: "familytreedb"
                - name: DB_USERNAME
                  value: "familytreeuser"
                - name: DB_PASSWORD
                  value: "Password123"
                - name: APP_ENV
                  value: "production"
                - name: APP_KEY
                  value: "base64:9jvjThP6JJA5ENjR2evQ27g3H7YE0OtCG+szdOeUsvM="
              restartPolicy: Never
          backoffLimit: 2
        EOF
        
        kubectl apply -f /tmp/fix-laravel-config.yaml
        kubectl wait --for=condition=complete job/fix-laravel-config -n $K8S_NAMESPACE --timeout=120s
        kubectl logs -n $K8S_NAMESPACE job/fix-laravel-config
        kubectl delete job fix-laravel-config -n $K8S_NAMESPACE

    - name: Restart Application
      run: |
        echo "Restarting application to apply configuration..."
        kubectl rollout restart deployment/laravel-app -n $K8S_NAMESPACE
        kubectl rollout status deployment/laravel-app -n $K8S_NAMESPACE --timeout=300s

    - name: Verify Deployment
      run: |
        echo "Verifying deployment..."
        
        # Wait for pods
        timeout 180s bash -c 'until kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app --no-headers 2>/dev/null | grep -q "Running"; do
          echo "Pods starting..."
          sleep 10
        done'
        
        # Test application
        echo "=== Testing application ==="
        kubectl get pods -n $K8S_NAMESPACE
        
        # Test health endpoint
        echo "=== Health check ==="
        kubectl exec -n $K8S_NAMESPACE deployment/laravel-app -- curl -s http://localhost/health.php
        
        # Verify configuration
        echo "=== Configuration verification ==="
        kubectl exec -n $K8S_NAMESPACE deployment/laravel-app -- php artisan tinker --execute="echo 'APP_URL: ' . config('app.url');"
        kubectl exec -n $K8S_NAMESPACE deployment/laravel-app -- php artisan tinker --execute="echo 'Asset URL: ' . (config('app.asset_url') ?: 'Not set');"
        
        # Final status
        echo "âœ… Deployment completed successfully!"
        kubectl get all -n $K8S_NAMESPACE

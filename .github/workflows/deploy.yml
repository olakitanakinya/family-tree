name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree
  PUBLIC_IP: 98.81.89.67
  NODE_PORT: 30008

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Create Namespace
      run: |
        kubectl apply -f k8s/namespace.yaml

    - name: Deploy AWS Credentials Secret
      run: |
        echo "üîë Deploying AWS credentials secret..."
        kubectl apply -f k8s/aws-credentials-secret.yaml

    - name: Setup MySQL Storage Only
      run: |
        echo "üì¶ Setting up MySQL storage only..."

        # Skip storage provisioner if already exists
        kubectl get storageclass local-path &>/dev/null || (
          kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
          sleep 5
        )

        # Create MySQL PVC only
        kubectl apply -f k8s/mysql-pvc.yaml

    - name: Deploy Database
      run: |
        echo "üóÑÔ∏è Deploying MySQL database..."
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml

        # Wait for MySQL to be ready
        echo "‚è≥ Waiting for MySQL to be ready..."
        kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=180s

    - name: Import Database Schema
      run: |
        echo "üìä Importing database..."
        kubectl apply -f k8s/db-sql-configmap.yaml
        kubectl apply -f k8s/db-import-job.yaml

        # Wait for import to complete
        echo "‚è≥ Waiting for database import..."
        kubectl wait --for=condition=complete job/db-import -n $K8S_NAMESPACE --timeout=180s

    - name: Clean Up Old Laravel Deployment
      run: |
        echo "üßπ Cleaning up old Laravel deployment..."
        # Delete existing deployment and PVC if they exist
        kubectl delete deployment laravel-app -n $K8S_NAMESPACE --ignore-not-found=true
        kubectl delete pvc laravel-shared-storage -n $K8S_NAMESPACE --ignore-not-found=true
        sleep 5

    - name: Deploy Laravel Application with S3
      run: |
        echo "üöÄ Deploying Laravel application with S3..."
        
        # Apply new deployment without PVC
        kubectl apply -f k8s/laravel-deployment.yaml
        kubectl apply -f k8s/laravel-service.yaml

        # SKIP waiting - let it deploy in background
        echo "‚è© Skipping wait - deployment will continue in background"
        sleep 10

    - name: Quick Status Check
      run: |
        echo "üìä Quick status check..."
        kubectl get pods -n $K8S_NAMESPACE
        echo ""
        echo "üåê Application URL: http://$PUBLIC_IP:$NODE_PORT"
        echo "üì± Login Page: http://$PUBLIC_IP:$NODE_PORT/login"

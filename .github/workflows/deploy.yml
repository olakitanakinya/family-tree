name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree
  PUBLIC_IP: 98.81.89.67
  NODE_PORT: 30008

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Create Namespace
      run: |
        kubectl apply -f k8s/namespace.yaml

    - name: Setup Storage
      run: |
        echo "üì¶ Setting up storage..."
        
        # Install Local Path Provisioner if not exists
        kubectl get storageclass local-path &>/dev/null || (
          kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
          sleep 10
        )
        
        # Create MySQL PVC
        kubectl apply -f k8s/mysql-pvc.yaml
        
        # Handle Laravel PVC - delete if exists and recreate
        if kubectl get pvc laravel-shared-storage -n $K8S_NAMESPACE &>/dev/null; then
          echo "Deleting existing PVC..."
          kubectl delete pvc laravel-shared-storage -n $K8S_NAMESPACE --ignore-not-found=true
          sleep 5
        fi
        
        echo "Creating new Laravel PVC..."
        kubectl apply -f k8s/laravel-storage-pvc.yaml
        
        # Wait for PVC to be ready
        echo "Waiting for PVC to be ready..."
        timeout 30s bash -c 'until kubectl get pvc laravel-shared-storage -n $K8S_NAMESPACE -o jsonpath="{.status.phase}" | grep -q "Bound"; do sleep 2; done' || echo "PVC may still be provisioning"
        
        echo "‚úÖ Storage setup completed"

    - name: Deploy Database
      run: |
        echo "üóÑÔ∏è Deploying MySQL database..."
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml
        
        # Wait for MySQL to be ready
        echo "‚è≥ Waiting for MySQL to be ready..."
        kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=180s

    - name: Import Database Schema
      run: |
        echo "üìä Importing database..."
        kubectl apply -f k8s/db-sql-configmap.yaml
        kubectl apply -f k8s/db-import-job.yaml
        
        # Wait for import to complete
        echo "‚è≥ Waiting for database import..."
        kubectl wait --for=condition=complete job/db-import -n $K8S_NAMESPACE --timeout=180s

    - name: Deploy Laravel Application
      run: |
        echo "üöÄ Deploying Laravel application..."
        
        # Delete existing deployment to ensure clean start
        kubectl delete deployment laravel-app -n $K8S_NAMESPACE --ignore-not-found=true
        sleep 10
        
        # Apply new deployment
        kubectl apply -f k8s/laravel-deployment.yaml
        kubectl apply -f k8s/laravel-service.yaml
        
        # Wait for rollout
        echo "‚è≥ Waiting for Laravel deployment..."
        kubectl rollout status deployment/laravel-app -n $K8S_NAMESPACE --timeout=300s

    - name: Verify File Upload Functionality
      run: |
        echo "üß™ Testing file upload functionality across pods..."
        sleep 30  # Wait for pods to be fully ready
        
        PODS=($(kubectl get pods -n $K8S_NAMESPACE -l app=laravel-app -o jsonpath='{.items[*].metadata.name}'))
        
        if [ ${#PODS[@]} -ge 2 ]; then
          echo "Testing cross-pod file sharing with ${PODS[0]} and ${PODS[1]}"
          
          # Create test files from first pod
          kubectl exec -n $K8S_NAMESPACE ${PODS[0]} -- /bin/sh -c "
            echo 'Testing file upload functionality - shared storage test' > /var/www/storage/app/public/userimage/shared_storage_test.txt
            echo 'Logo upload test - shared storage' > /var/www/storage/app/public/logos/shared_storage_logo.txt
            echo '‚úÖ Test files created from ${PODS[0]}'
            ls -la /var/www/storage/app/public/userimage/
            ls -la /var/www/storage/app/public/logos/
          "
          
          # Verify from second pod
          kubectl exec -n $K8S_NAMESPACE ${PODS[1]} -- /bin/sh -c "
            echo 'Checking file visibility from ${PODS[1]}...'
            if [ -f /var/www/storage/app/public/userimage/shared_storage_test.txt ] && [ -f /var/www/storage/app/public/logos/shared_storage_logo.txt ]; then
              echo '‚úÖ SUCCESS: Shared storage is working! Files visible across pods.'
              echo 'üìÑ File content:'
              cat /var/www/storage/app/public/userimage/shared_storage_test.txt
            else
              echo '‚ùå FAILED: Shared storage not working'
              echo 'Files in userimage:'
              ls -la /var/www/storage/app/public/userimage/
              echo 'Files in logos:'
              ls -la /var/www/storage/app/public/logos/
              exit 1
            fi
          "
        else
          echo "‚ö†Ô∏è  Only ${#PODS[@]} pod(s) found, cannot test cross-pod sharing"
        fi

    - name: Final Verification
      run: |
        ACCESS_URL="http://$PUBLIC_IP:$NODE_PORT"
        
        echo "üéØ Final verification..."
        CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $ACCESS_URL/assets/frontend/css/bootstrap.min.css || echo "000")
        
        echo "üìä Test Results:"
        echo "   Bootstrap CSS: $CSS_STATUS"
        
        if [ "$CSS_STATUS" = "200" ]; then
          echo "üéâ SUCCESS: Application deployed successfully!"
          echo "üåê Application URL: $ACCESS_URL"
          echo "üì± Test file uploads at: $ACCESS_URL"
        else
          echo "‚ö†Ô∏è  WARNING: Some assets may not be loading correctly"
        fi

        # Show deployment status
        echo ""
        echo "üì¶ Deployment Status:"
        kubectl get pods -n $K8S_NAMESPACE
        echo ""
        echo "üíæ PVC Status:"
        kubectl get pvc -n $K8S_NAMESPACE

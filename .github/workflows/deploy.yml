name: Deploy Family Tree App

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: olakitanakinya/family-tree
  K8S_NAMESPACE: family-tree

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, linux, X64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Install Local Path Provisioner
      run: |
        echo "Installing Local Path Provisioner for storage..."
        kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
        
        # Wait for provisioner to be ready
        sleep 30
        
        # Set as default storage class
        kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
        
        echo "Storage classes:"
        kubectl get storageclass

    - name: Deploy to Kubernetes
      run: |
        # Apply all Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/mysql-secret.yaml
        
        # Check PVC status before applying
        echo "Checking storage availability..."
        kubectl get storageclass
        
        # Apply PVC and wait for it to bind
        kubectl apply -f k8s/mysql-pvc.yaml
        echo "Waiting for PVC to bind..."
        
        # Wait for PVC to be bound with timeout
        timeout 120s bash -c 'until kubectl get pvc mysql-pvc -n $K8S_NAMESPACE -o jsonpath="{.status.phase}" | grep -q Bound; do sleep 5; echo "Waiting for PVC to bind..."; done' || echo "PVC may still be provisioning"
        
        # Show PVC status
        kubectl get pvc -n $K8S_NAMESPACE
        
        # Deploy MySQL
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-service.yaml
        
        # Wait for MySQL to be ready with better debugging
        echo "Waiting for MySQL to be ready..."
        timeout 300s bash -c 'until kubectl get pod -n $K8S_NAMESPACE -l app=mysql -o jsonpath="{.items[0].status.phase}" | grep -q Running; do sleep 10; echo "Still waiting for MySQL..."; kubectl get pods -n $K8S_NAMESPACE; done'
        
        # Final readiness check
        if kubectl wait --for=condition=ready pod -l app=mysql -n $K8S_NAMESPACE --timeout=60s; then
          echo "✅ MySQL is ready!"
        else
          echo "⚠️ MySQL pod exists but not ready. Checking status..."
          kubectl get pods -n $K8S_NAMESPACE
          kubectl describe pod -n $K8S_NAMESPACE -l app=mysql
          echo "Continuing deployment anyway..."
        fi
        
        # Deploy Laravel app
        kubectl apply -f k8s/laravel-deployment.yaml
        kubectl apply -f k8s/laravel-service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Verify deployment
      run: |
        # Wait for Laravel pods to be ready
        echo "Waiting for Laravel pods to be ready..."
        kubectl wait --for=condition=ready pod -l app=laravel-app -n $K8S_NAMESPACE --timeout=300s
        
        # Check rollout status
        kubectl rollout status deployment/laravel-app -n $K8S_NAMESPACE --timeout=300s
        
        # List all resources
        echo "✅ Deployment complete! Kubernetes resources:"
        kubectl get all -n $K8S_NAMESPACE
        
        # Show services and ingress
        echo "Services:"
        kubectl get svc -n $K8S_NAMESPACE
        echo "Ingress:"
        kubectl get ingress -n $K8S_NAMESPACE
        
        # Show final pod status
        echo "Final pod status:"
        kubectl get pods -n $K8S_NAMESPACE -o wide
